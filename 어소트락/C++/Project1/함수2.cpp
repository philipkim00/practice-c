#include <stdio.h>

int Add(int a, int b)
{
	return a + b;
}

// 함수
int main()
{
	int iData = Add(100, 200);

	iData = Add(300, 400);

	iData = Add(222, 700);

	iData = Add(333, 555);




	// 반복문 
	//for (/*반복자 초기화*/;/*반복자 조건 체크*/;/*반복자 변경*/)
	//{

	//} 

	// 0, 1, 2, 3
	for (int i = 0; i < 4; ++i)
	{
		if (i % 2 == 1)
		{
			continue;
		}

		printf("output Test\n");
	}

	/*int i = 0;
	while (i < 4)
	{
		printf("Output Test\n");

		++i;

		continue;

		break;
	} */

	int i = 0;
	int i2 = 1;

	// 단축키
	// 지정한 구문 주석       : Ctrl + k, c
	// 지정한 구문 주석 해제  : Ctrl + k, u
	// Alt Drag

	// 디버깅
	// 디비겅 시작                     : F5
	// 다음 중단점까지 코드 실행

	// 중단점 생성 및 해제             : F9
	// 디버깅 중, 구문 수행            : F10
	// 디버깅 중, 구문 수행(함수 진입) : f11
	// 디버깅 중, 디버깅 종료하기 : Shift + F5

	// 콘솔
	// printf
	printf("abcdef %d \n", 10);
	printf("abcdef %f \n", 3.14f);

	for (int i = 0; i < 10; ++i)
	{
		printf("Output i : %d \n", i);
	}

	// scanf
	int iInput = 0;
	scanf_s("%d", &iInput);


	// 함수가 사용하는 메모리 영역
	// 스택 메모리 영역



	return 0;
}

/*
## 함수
프로그램 실행되면 제일 먼저 실행되는 함수는 ?
메인함수.!
프로그램 종료는
메인함수가 종료됬다는것.

->(호출)
메인함수->a함수->b함수 ->.c함수
-> ? 함수
-> !함수
계속 해서 함수를 호출하는데 이건 그 전 함수가 끝나기전까지 함수는 끝나지않음.
c함수 끝나야 b함수 끝나고 a함수 끝나고 메인함수 끝나야 프로그램 종료.

### 자료구조.(Data structure)
데이터를 어떻게 효율적으로 처리하고 관리하는것.

스택 - 후입선출(나중에 들어온게 먼저 나간다.)

큐(Queue) - 선입선출(먼저 들어오고 먼저 나감.)

#### 메인함수가 시작되고 우리는 그 메인함수에 변수들을 다 파악해둔다.(공간이 이미정해짐)

#### 초심자 착각
메모리와 코드를 동일시하면 안됨.

코드는 메모리 영역이 아님.
코드는 명령어의 집합
명령어는 수행했을떄 수행에 맞춰서 사용되는것이 메모리 영역.

함수 명령어 집합체.

컴퓨터는 명령어를 수행하면서 메모리공간에 변수 생성하기도하고 메인함수 호출될떄
쓸만큼의 메모리잡고 Add함수 호출할떄 8바이트 필요하다면 8바이트잡고 그 명령을 수행.


### 메모리 변화.
int Add(int a, int b)
{
	return a + b;
}

int main()
{
	int iData = Add(100, 200);

	iData = Add(300, 400);

	iData = Add(222, 700);

	iData = Add(333, 555);
}
1. 코드 시작(main함수 시작)
2. 메인함수의 변수만큼 바이트를 줘서(메모리를 잡음)
3. 메인함수안에는있는 Add함수 호출
4. Add함수의 메모리 줌.(int 2개니까 8바이트정도)
5. Add함수의 a, b 더한값 300을 반환함.
6. 반환하면서 Add함수 종료되면서 Add함수 메모리 해제됨.
7. 그리고 iData변수에 300을 대입.
8. Add함수 또다시 호출.Add함수가 쓸만큼 메모리공간생김
9. 반복.
*/