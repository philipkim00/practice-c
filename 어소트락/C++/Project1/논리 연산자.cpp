#include <stdio.h>

int main_g(void)
{
	// 자료형 : 변수가 어떠한 형태를 나타내는지를 설명해주는 역할이 자료형에 역할.
	// : (크기단위, byte) Date Type
	// 정수형 : char(1) , short(2), int(4) , long(4) , long long(8) ,더있슴
	// 실수형 : float(4), double(8)

	int i = 0;
	// 1.i안에 들어가는 데이터는 정수 표현방식을 따른다. 
	// 2. i라는 변수의 크기는 4바이트이다.

	// 1 바이트로 양수만 표현
	// 256가지 -> 0~255
	unsigned char c = 0; // 1바이트 양의 정수만 내포하는 자료형.
	c = 0;
	c = 255;
	c = 256; //짤려서 못들어옴. 


	//바이트 양수, 음수 둘다 표현
	// -128 ~ 0 ~ 127 
	/*signed*/ char c1 = 0;
	//signed 키워드가 기본적으로 생략되있고 음수 양수 둘다표현하지만 기본적인 전제라 적지는않음.
	c = 255;
	c = -1;

	// 음의 정수 찾기(2의 보수법)
	// 대응되는 양수의 부호를 반전 후, 1을 더한다.

	int a = 4 + (int)4.0;

	// 정수표현 방식과 실수 표현 방식은 다르다
	// 실수 표현방식은 정밀도에 의존한다.
	// 따라서 double(8) 자료형이 float(4) 보다 더 아래의 소수점까지 정확하게 표현이 가능하다.

	// 정수는 정수끼리, 실수는 실수 끼리 연산하되, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환하자.

	float f = 10.2415f + (float)20;

	// 실수를 상수로 적을 경우 소수점 뒤에 f를 붙이면 float 자료형으로, f 를 붙이지 않으면 double 자료형으로 간주한다.
	// 0.1f; 0.1;




	// 연산자
	// 대입 연산자, =(오른쪽에 값을 왼쪽에 넣어라)


	// 산술 연산자
	// + , -, *(곱하기), /(나누기), %(모듈러스, 나머지연산자, 피연산자가 모두 정수)
	// ++, -- (증감 연산자)
	// 한 단계 증가 또는 감소.
	int data = 10 + 10; // 20
	//data = data + 20;
	data += 20;

	//data = 10 % 3; //이렇게 하면 나머지 1
	data = (int)(10.f / 3.f); //3.33333333 나와야 하지만 앞에 int를 썻으므로 정수변환 3으로 변환됨. 명시적으로 표현함.!


	data = 0;
	++data; // 전위(전치)
	data++; // 후위(후치)
	// 후위 연산자로 사용하는 경우, 연산자 우선순위가 가장 나중으로 밀린다.

	data = 0;

	a = 10;
	data = a++;  //data에 a넣고 증가. 그래서 data안에 수는 10
	data = ++a;  // a에 1더하고 data에 넣어서 data 수는  11

	data = 0;
	data--;
	data--;


	//data++; 1
	//data++; 2
	data--; // -1 
	data--; // -2


	// 논리 연산자
	// !(역), &&(곱,And), ||(합,Or)
	// 참(true), 거짓(false)
	// 참   : 0 이 아닌 값, 주로1
	//거짓  : 0
	bool trueflase = true;
	bool IsTrue = 100;  // true 1로 받아드림 100을 저장하는것이 아님. , 
	                    // 100을 넣어도 참이라고 생각하겠네? 아니다. 1, 또는 0으로 판단하기떄문에 1또는 0으로 변환되서 들어간다.


	IsTrue = true;
	IsTrue = !IsTrue; // false

	// 일반 정수형 자료형에도 역은 먹힌다.
	int iTrue = 0;
	iTrue = !iTrue;

	//iTrue = 100 && 200; // 1(참)
	iTrue = 0 && 200; // 0(거짓)
	//iTrue = 0 || 300; // 1(참)
	iTrue = 0 || 0; // 0(거짓)

	// 구문 
	// if, else
	// switch case



	// 삼항 연산자
	// :?



	return 0;
}

/*
논리 연산자
1.!(역),
참을 거짓으로 만들고 거짓을 참으로 만듬.

2. && (곱, and연산자),
양쪽에 피 연산자가 둘다 참일때만 참.
하나라도 틀리면 거짓.

벤다이어 그램에서 교집합.

3. || (합, or연산자)
하나라도 맞으면 참.둘다 맞아도참.
둘다 아니여야 거짓.

벤다이어 그램에서 합집합.

4.참(true),
참 0이 아닌 값, 주로1(대표적)
애매하다.
이게 1, 10을 컴퓨터에게 보여주면 참이지만
컴퓨터가 반환을 할 떄는 1만 반환함.

5.거짓(false)
그냥 0!!!!!!!!!!!!!!!


int trueflase = true;
int trueflase = false;
위처럼 쓰이기도 하지만.
참거짓 전용 자료형이있다.
bool
정수형 자료형임.
0과 1만 취급해서.
0과 1만 취급하는 정수형 ?
크기 : 1byte이다.
1바이트면 0~255까지를 표현해야되는데
bool은 0과 1로만 받아드림.
bool trueflase = true;

bool IsTrue = 100;  //true 1로 받아드림 100을 저장하는것이 아님.

가끔 실수하기 쉬운것이 있다.
처음 문법을 배울떄 1만이 참인줄암.
연산수식에서는
애네는 1을 참이라고 생각하지만
받아 들일때는 0만 아니면 다 참


### 활용하는경우
조건문 작성할떄
이 변수의 값이 0이면 거짓으로보고
이 값이 들어올떄 반드시 1이라는 보장이 없고
0 이 아닌 어떤 수가 들어오고 그것도 의미 잇는 숫자라 훼손되면 안되고 그 값을 그대로 남겨야한다.
그값을 유지한체로 그 값을 참이냐 거짓이냐를 즉시활용할떄
bool이 아닌 일반 정수형 자료형을 아용.


논리 연산자랑 엮어서 잘쓰이는 구문과 삼항 연산자.
비교구문
if, else
switch case

// 삼항 연산자
// :?

*/
