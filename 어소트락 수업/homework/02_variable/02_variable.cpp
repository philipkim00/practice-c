#include <iostream>

//7전역변수 프로그램 시작과 동시에 할당
//7프로그램이 종료되기전까지는 사라지지 않는다.(많이사용하면메모리가 넘쳐서 프로그램 종료될수도있다.)
int gdata = 200; // 전역 변수 //7 메인함수 바깥쪽에 선언하면 모든곳에서 접근할수 있다.

int main()
{
	// 면접 단골 질문

	// new malloc 동적할당

	// 이름 바꾸기 ctrl + R,R
	int A = 200; //초기화
	A = 300; //대입 
	// 둘의 차이 초기화와 대입.


	//int a = 0; //4byte 
	//char ch = "A";
	//int char = 5;
	int a = 5; 
	a = 100;

	//int A = 200;

	/*signed*/ int m_ch; // 기본적으로 signed 생략되어있음
	unsigned int g_ch = -1; // unsigned 양수만 취급하겠다. 음수처리를 예외적으로해주거나 양수만들어가게 설게해야함.
	                        // 이렇게 하면 전혀 다른 숫자가뜸.

	//[0][1][1][0][0][1]


	// 변수의 이름을 지을떄 규칙.
	// 이미 예약되어 있는 키워드는 식별자(이름)이 될수가 없다.
	// 대문자와 소문자는 서로 구분이 된다.
	// 이름은 대소문자, 숫자, 및 문자로만 구성될수 있다.
	// 대소문자 함께 _(특수문자)는 이름으로 사용할수 있다.

	// 문자 유형
	char ch = 'A'; //컴퓨터는 기본적으로 코드랑 입력한 문자를 구분을 못한다 그래서 문자를 사용할때는 작음 따음표를 사용한다.
	

	// 부동 소수점 유형
	// 정수 실수 ( 소수 표현 )
	float pi = 3.141592f;

	// 변수 x 가 아니고 상수 (const)
	// lvalue 대입연산자 기준 왼쪽이면 lvalue
	// rvalue 대입연산자 기준 오른쪽이면 rvalue
	const float pi2 = 3.141592f; 
	// f안붙이면 더블 취급함. 명시해줘야한다.


	pi = -1.123f; 
	//pi2 = 1.52f // pi2 상수이기떄문에 오류뜸.

	// true false
	//bool b = true; /*0*/
	//b = false;

	// 좋은 코드
	// 좋은 코드란 남들이 보기쉬운 코드.

	// 과도한 주석 가독성 해치기도한다.

	
	// 프로그래밍 잘한다.

	// 3가지 분류로 할수있다.

	// 1. 디버깅 60 +_ 자료구조 + 알고리즘
	// 직접 만드는게 작업속도 -> 높다. 

	// 2. 문자열 20처리

	// 3. 파일입출력 20
	// 하드리스크 SSD 저장.

	// 수학, 3d 이론, 네트워크 (이 세개는 분야에 따라 공부)
	// 라이브러리, API 


	// 데이터 타입 자동 유추
	auto num = 100; //자동으로 자료형을 유추해서 컴퓨터가 알아서넣음
	// 문자열이 너무길면 가끔 사용.
	unsigned long long number = 1234213233133;
	// 너무 남발하면 데이터타입을 유추하기 어려워진다.
	// 속도면에서 살짝 느림.

	// 데이터 타입 추론
	
	decltype(ch) number3;
	//decltype (기존변수) 새로운변수
	// 이렇게 하면 새로운 변수에 타입이 기존 변수 타입으로 정해짐.
	//7g = 100;

	for (size_t i = 0;  i < lenght; i++) 
	{
		gdata = 0;
	}
	
	// i = 200;

	//6 
	{
		int d = 0; 
	}
	//6d = 200
	
	//6 지역변수(공간안에서 생긴 변수.)
	//6그 공간 바깥쪽에서는 사용불가
	//6 그 공간이 끝나면 메모리에서 자동으로 삭제된다.

	//7 int g = 0; 변수짤떄 아래에 변수를 만들면 위쪽에는 못쓴다.
	//7 그래서 메모리도 기본적으로 위에 있는 부분이 밑에서 가져다 쓸수 있는 구조 쓴코드를. 그래서 스택에서 만들어진 지역변수는 위의 메모리에서 못씀.
	//7 그래서 변수를 어느 위치에 에서 다쓸려면 전역변수를 쓰면 소스코드 어디서든 다 접근 가능.

	//전역변수 지역변수 구분 잘하기.

	return 0; //프로그램 종료.
}




/*
숙제 다하기.
질문 교무실에 계심 없으시면 카톡으로가능하시다함.

프로그래머라면 컴퓨터 한번쯤은 분해 조립해보기.
컴퓨터 용품
1. 파워
2. 컴퓨터 연산하는장치(CPU)
3. 메모리(RAM) 잠지 저장
4. HDD/SDD 컴퓨터에 저장.
5. GPU(그래픽카드) 그래픽연산할떄 사용
6. 메인보드
GPU 병렬 처리해서 그래픽 처리.

컴퓨터 저정하는법?
0과 1밖에 저장이안된다.
ex) 2진수로 저장한다.

8bit = 1byte

4바이트 경우의수
42억개
표현되는수 범위
-21억~21억

int a = 5;
메모리 어딘가에 4바이트만큼의 공간이 생기고 그 공간에 2진수로 표현된 5가 들어감.

=(대입 연산자)
오른쪽에 있는걸 왼쪽에 대입한다.


좋은 코드
남이 봤을떄 잘이해되는 코드

램에 공간을 사용하고
종료하고 초기화를 안해주면 
쓰레기 값이 그대로 남아있다.
그래서
꼭 변수를 초기화를 해줘야한다. 
초기화를 해줘야한다. 쓰레기값이 있을수도있어서.


단축키
1. home 버튼 눌르면 커서가 가장 앞쪽으로 이동
2. end 버튼 눌리면 커서가 가장 뒤쪽으로 이동
3. alt+ 드래그 범위 지정.
4. ctrl 좌우상우 단락 단위로 넘어감.
5. 주석 부분 숫자 옆에 + 버튼 눌르면 숨겨짐(ctrl +m, m)  
6. ctrl +r ,r 는 똑같은 변수를 다른 이름으로 다 바꿀수 있다.
	// 주석 ctrl +k +c
	// 주석해제 ctrl +k +u


메모리 할당될떄.
메모리 공간 분배.
1. 코드영역(소스코드)(우리가 친 코드)
2. 데이터 영역(전역 변수)
3. 힙(동적할당)  new malloc 동적할당
4. 스택(지역변수)

*/
