#include <iostream>

// 1배열

int main()
{
	//1
	int a = 1;
	int b = 2;
	int c = 3;
	int d = 4;
	
	// 동시에 사용할수는 있지만 나중가면 문제생김(변수길어지면)
	// 4가독성을 해친다.
	// 4네개가 동시에 디버깅되서 번거롭다
	// 4디버깅이 불편하다.
	// 4보기좋은코드가 좋은코드다.
	//int a = 1, b = 2, c = 3, d = 4; 

	std::cout << a << b << c << d << std::endl;

	//1int arr[4]  //1자료형 선언해주고 배열의 크기선언 선언만하면 쓰레기값이 나옴. //변수가 많으면 귀찮으니까 배열 사용.
	int arr[4] = { 1,2,3,4};//1배열의 초기화 //1배열을 만들면 공간을 4칸 만들고 순서대로 들어감
	
	// 2배열에 접근할떄 호출법 0부터 시작.
	//3인덱스 [0] 각각의 인덱스를 지정해주고 변수처럼 똑같이 사용.
	arr[0] = 7;
	arr[3] = 100;
	//2 arr[4] = 500;	// 2실행은되지만 할당하지않은 메모리부분 접근한거라
						// 2원래 그 메모리 위치에 뭐가 있으면 그 프로그램 꺼짐
						// 2서버 꺼질수도있음 ㅈ됌 ㅋㅋ; 
						// 2인덱스 넘어가게 사용하는것 주의해야함.
	// 3배열 사용할떄
	// 3콘솔창에 안나오면 빌드쪽에 솔루션 정리하기.
	
	//4std::cout << arr[0] << arr[1] << arr[2] << arr[3];

	//4배열의 규칙성이 있어서 배열이랑쓰면 좋다.
	//일반 for문을 통한 배열 순회
	for (int i = 0; i < 4; i++) // i < 4 를 쓰는 이유 0부터 시작해서.
	{
		std::cout << arr[i];
	}

	// 5오른쪽 인자에 배열 여러가지 자료구조 들어감.
	// 5arr배열에 있는걸 하나하나 자동으로 꺼내옴.
	// 5똑같은 반복문
	// 5범위기반 for문을 통한 배열 순회.
	for (int indexValue : arr) //범위기간  for? (자료형 변수 : 자료형?)
	{
		std::cout << indexValue;
	}
	return 0;
	//5 아래 위 중에 아래가 더 좋다 더 복잡해지면 아래것이 더좋음.
}