소스코드 - >머신코드

clang -o\ hello hello.c -lcs50  ( 매우복잡하고 어렵)  그래서 make hello 만 기억. 똑같이 만들어짐
./hello

변수의 종류가 뭔지 알려주는 걸 앞에 넣어야함. string(문자열) int(정수)

counter = 0
이처럼 변수를 선언할떄 무엇인지 알려줘야하기때문에 변수의 종류 알려줘야해서 int 넣음
int counter = 0;

변수에 1을 증가시킬떄
counter = counter +1;
대수학에서는 성립이 안되지만 등식이 아님 오른쪽에서 왼쪽으로 할당하라는 의미.
하지만 이거는 int 라고 애기해줄 필요 x - 이미 counter 존재한다고 가정 이미 앞에 counter은
int 라고 했기때문에 다시 int 입력 할 필요 x

counter = counter+1;
counter += 1;
counter++;
이 3개는 같은 의미.


조건
if (x<y)
{
	printg("x is less than y\n");
}
else
{
	printf("x is not less than y\n");
}

세미콜론이 두개 보통 조건과 같은 것들은 끝에는 세미콜론을 붙이지 않는다 그렇지만
함수가 들어간 줄들은 세미콜론으로 끝낸다. 

if (x<y)
{
	printg("x is less than y\n");
}
else if (x>y)
{
	printf("x is greater than y\n");
}
else if (x == y)
{
	printf("x is equal to y\n");
}

== 쓰는 이유는 =는 등호 표시 하나를 의미하는 할당 연산자이고 같다는 의미는 ==(일치연산자) 


위에 있는 코드는 3개의 불리언 함수는 같지만 3번쨰 같다는 의미는 사용할 필요없슴.
왜냐하면 x와 y가 같다는 불리언 표현은 굳이 물어볼필요 없음 왜냐하면 x가 y보다 작지도 크지도 않다면
우리에게 남은 가능성은 같다는 것이기떄문에.

if (x<y)
{
	printg("x is less than y\n");
}
else if (x>y)
{
	printf("x is greater than y\n");
}
else
{
	printf("x is equal to y\n");
}

이렇게 수정가능.
간단하게 만들수 있다. 코드의 수준 혹은 정확성 즉 해야 할 일을 잘 수행하는가도 있지만
얼마나 효용성으로 효율적으로 짜는지가 중요하다(최적화)

루프

forever == while(가장 비슷)

while
{
	printf("hello, world\n");	
}

여기서 while만 적으면 안되고 반복하고 싶은 것에 더해 불리언 표현에도 답해야 한다.
c에서 루프를 구현하고 싶다면 성립 조건을 정해줘야한다.

성립조건 예시(예==참==1) 질문 던져줘야함. 프로그래머에게 같다.
항상 성립하게 하는 성립조건은 많지만(5=5,1<2)
 가장 간단한 방법은 true다

while (true)
{
	printf("hello, world\n");	
}

int counter =0; 변수가 너무길기 떄문에 프로그래머들은 int i =0; 뭔가를 셀때 정수 나타내는 i씀

int i = 0;
while(i < 50)
{
	printf("hello, world\n");
	i = i +1;
}

i는 0으로 설정 -> i는 50보다 작은가? -> 작다 -> hello world를 출력한다 -> i를 1증가시킨다 -> i가 50보다 작은가?
-> (반복) -> i가 50보다 작은가? -> 작지 않다 -> 종료


int i = 0;
while(i < 50)
{
	printf("hello, world\n");
	1++;
}

c에서는 이런 식으로 논리 구조를 만들어서 뭔가를 특정 횟수만큼 반복하는걸 구현가능

또다른 방법(더 자주 사용) for문
for (int i =0; i<50; 1++) 
{
	printf("hello, world\n);
}

for루프는 주어진 일을 게속해서 반복하지만 휠씬더 기계적이다.
우리가 방금 구현했던 논리 구조를 딱 코드 한줄로 자동화하고
4줄 코드로 쉽게함.

같은 목표를 달성하기 위한 좀 더 간단한 방법이라고 생각하라.

